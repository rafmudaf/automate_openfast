
.. toctree::
    :hidden:
    :glob:
    :titlesonly:

    source/code
    source/changelog


A template Python project for scientific software
-------------------------------------------------
For technical questions regarding TEMPLATE usage please contact
`INSERT DEVELOPER <mailto:devel.oper@gmail.com>`_ directly.

Background and Objectives
=========================
This TEMPLATE project serves as a base for building up new scientific software
packages and integrating with automated tools. Specifically, configuration
files are included for the follow tools:

- Installation through ``pip``
- Continuous integration and testing with TravisCI 
- Web-based documentation with Sphinx and ReadTheDocs

Citation
========
Add citation info here

.. _installation:

Installation
============
Using ``pip``, TEMPLATE can be installed in two ways

- local editable install

- using a tagged release version from the ``pip`` repo

For consistency between all developers, it is recommended to use Python
virtual environments;
`this link <https://realpython.com/blog/python/python-virtual-environments-a-primer/>`_
provides a great introduction. Using virtual environments in a Jupyter Notebook
is described `here <https://help.pythonanywhere.com/pages/IPythonNotebookVirtualenvs/>`_.

Local Editable Installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The local editable installation allows developers to maintain an importable
instance of TEMPLATE while continuing to extend it. The alternative is to
constantly update Python paths within the package to match the local
environment.

Before doing the local install, the source code repository must be cloned
directly from GitHub:

.. code-block:: bash

    git clone https://github.com/rafmudaf/python_template

Then, using the local editable installation is as simple as running the
following command from the parent directory of the
cloned repository:

.. code-block:: bash

    pip install -e template/

Finally, test the installation by starting a python terminal and importing
TEMPLATE:

.. code-block:: bash

    import template

pip Repo Installation
~~~~~~~~~~~~~~~~~~~~~
The TEMPLATE version available through the pip repository is typically the latest
tagged and released major version. This version represents the most recent
stable, tested, and validated code.

In this case, there is no need to download the source code directly. TEMPLATE
and its dependencies can be installed with:

.. code-block:: bash

    pip install template

Dependencies
============
TEMPLATE has dependencies on various math, statistics, and plotting libraries in
addition to other general purpose packages. For the main modules, the
dependencies are listed in ``python_template/requirements.txt``. The
documentation has additional requirements listed in
``python_template/docs/requirements.txt``.

The requirements files can be used to install everything with:

.. code-block:: bash

    pip install -r requirements.txt

Dependencies should generally be kept to a minimum and unused packages should
be purged regularly. Its generally preferred to use the latest stable version
of a package; that is, the `master` branch or latest version that is *not* a
release candidate (`-rc`). Dependency versions can be listed in the
requirements list with a specific version (``==``) or a minimum version
(``>=``). It is common practice to tie dependencies to the latest version
available at the time of development and upgrade slowly and deliberately
over time.

Documentation
=============
This project contains web-based documentation compiled with Sphinx and hosted
through ReadTheDocs. Additional dependencies required to build the
documentation are included in ``docs/requirements.txt``.

To compile the documentation locally, install all requirements and execute the
following commands:

.. code-block:: bash

    # Install documentation specific dependencies
    pip install -r docs/requirements.txt

    # Compile the documentation
    make html

The in-code docstrings can be post processed and included in a API reference
automatically. This project includes the placeholder files for that in
``docs/source``, but it can also be autogenerated with this command:

.. code-block:: bash

    # Generate the API documentation from doc strings
    make apidoc

The documentation is managed by a configuration file at ``docs/conf.py``.
Here, any extensions required by Sphinx are listed, a layout template can
be chosen, and various options are given for the template, documentation
generation, and generating additional formats like PDF. When the
documentation is built both locally and on ReadTheDocs, Sphinx reads
the configuration from ``conf.py`` and applies it to the current system.

.. note::

    Build the documentation locally when making modifications to ``conf.py``
    so that changes can be seen in near real time.

License
=======

Copyright 2019 NREL

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
